---
title: "Process posteriors from sleep models"
date: "2022-05-16"
author: "Ewan Carr"
format: 
  html:
    code-fold: true
    warning: false
    cache: true
editor_options: 
  chunk_output_type: console
---

## Setup

```{r, echo=FALSE}
library(tidyverse)
library(here)
library(brms)
library(tidybayes)
library(scales)
library(gtsummary)
library(marginaleffects)
load(here("data", "clean", "merged.Rdata"), verbose = TRUE)
load(here("data", "clean", "analytical_samples.Rdata"), verbose = TRUE)
load(here("data", "clean", "analytical_data.Rdata"), verbose = TRUE)
```

### Define sleep measures

```{r, echo=FALSE}
trans <- c("c_tst_med", 
           "c_cm3_tst_med", 
           "log_tst_var",
           "c_slpeff_med",
           "cz_sfi_med",
           "hysom_ever",
           "cm3_son_med",
           "cm3_soff_med",
           "log_son_rel_var",
           "log_soff_rel_var",
           "log_sol_med",
           "smid_med",
           "log_smid_var",
           "sjl")

source(here("sleep", "cleaning", "temp_labels.R"))
```

# Binary models for RELAPSE

Load models, extract posterior samples:

```{r}
load(here("sleep", "models", "samples", "samples_relb.Rdata"), verbose = TRUE)
names(fit_relb) <- map(models_relb, make_names)

# For adjusted estimates only 
post_relb <- map2_dfr(trans, fit_relb[15:28],
                      ~ .y |>
                        tidy_draws() |>
                        gather_variables() |>
                        filter(.variable %in% paste0("b_", trans)))
```

## Table: Odds ratios and 89% Credible Intervals

```{r}
post_relb |>
  mutate(.value = exp(.value)) |>
  group_by(.variable) |>
  median_qi(.width = 0.89) |>
  arrange(-abs(log(.value))) |>
  knitr::kable(digits = 2)
```

## Figure

```{r}
post_relb |>
  ggplot() +
    aes(y = .variable,
        x = exp(.value),
        fill = .variable,
        color = .variable) +
  # stat_dots(side = "left",
  #           point_colour = "black") +
  stat_halfeye(.width = c(0.66, 0.89),
               point_colour = "black",
               interval_colour = "black") +
  geom_vline(xintercept = 1, color = "red") +
  scale_x_log10(breaks = c(0.5, 1, 2)) +
  coord_cartesian(xlim = c(0.4, 2.5)) +
  theme(legend.position = "none")
```

# Binary models for deterioration

```{r}
load(here("sleep", "models", "samples", "samples_det.Rdata"), verbose = TRUE)
names(fit_det) <- map(models_det, make_names)

# For adjusted estimates only 
post_det <- map2_dfr(trans, fit_det[15:28],
                      ~ .y |>
                        tidy_draws() |>
                        gather_variables() |>
                        filter(.variable %in% paste0("b_", trans)))
```


```{r}
post_det |>
  mutate(.value = exp(.value)) |>
  group_by(.variable) |>
  median_qi(.width = 0.89) |>
  arrange(-abs(log(.value))) |>
  knitr::kable(digits = 2)
```

## Figure

```{r}
post_det |>
  ggplot() +
    aes(y = .variable,
        x = exp(.value),
        fill = .variable,
        color = .variable) +
  stat_halfeye(.width = c(0.66, 0.89),
               point_colour = "black",
               interval_colour = "black") +
  geom_vline(xintercept = 1, color = "red") +
  scale_x_log10(n.breaks = 5) +
  coord_cartesian(xlim = c(0.5, 2)) +
  theme(legend.position = "none")
```

# Linear models for IDS total score

```{r}
load(here("sleep", "models", "samples", "samples_ids.Rdata"), verbose = TRUE)
names(fit_ids) <- map(models_ids, make_names)

# Choose: unadjusted or adjusted
adj <- 15:28
unadj <- 1:14

post_ids <- map2_dfr(trans, fit_ids[adj],
                      ~ .y |>
                        tidy_draws() |>
                        gather_variables() |>
                        filter(.variable %in% paste0("b_", trans)))
```

```{r}
post_ids |>
  group_by(.variable) |>
  median_qi(.width = 0.89) |>
  arrange(-abs(.value)) 
```

```{r}
post_ids |>
  ggplot() +
    aes(y = .variable,
        x = .value,
        fill = .variable,
        color = .variable) +
  stat_halfeye(.width = c(0.66, 0.89),
               point_colour = "black",
               interval_colour = "black") +
  geom_vline(xintercept = 0, color = "red") +
  theme(legend.position = "none")
```

## Plot specific effects for IDS

```{r}
for (x in trans) {
  f <- fit_ids[[str_glue("ids_total__{x}__adj")]] 
  print(plot_cap(f,
                 condition = x,
                 re_formula = NA))
}
```

# Test of differences by atypical depression

```{r}
load(here("sleep", "models", "samples", "samples_inter.Rdata"), verbose = TRUE)
names(fit_inter) <- map_chr(opts, ~ str_glue("{.x$y}__{.x$x}"))

map_dfr(fit_inter, ~ loo_compare(.x$wo, .x$wi)[2]) |>
  pivot_longer(everything()) |>
  arrange(value) |>
  knitr::kable(digits = 3)
```

```{r}
for (y in c("relb", "det", "ids")) {
  for (x in trans) {
    m <- str_glue("{y}__{x}")
    if (m %in% names(fit_inter)) {
      p <- plot_cap(fit_inter[[str_glue("{y}__{x}")]]$wi,
                    c(x, "atyp"),
                    re_formula = NA)
      print(p)
    }
  }
}
```

# END.
